<!-- Add this right before the closing </body> tag in your index.html -->
<script>
    const logsTableBody = document.querySelector('#call-logs-table tbody'); // Make sure your table has an id="call-logs-table"
    const waitingMessage = document.querySelector('#waiting-message'); // Add id="waiting-message" to the "Waiting for calls..." row

    async function fetchLogs() {
        try {
            // Replace with your ngrok URL or deployed server URL
            const response = await fetch('https://<random-string>.ngrok.io/logs'); 
            const logs = await response.json();

            // Clear the table
            logsTableBody.innerHTML = '';

            if (logs.length > 0) {
                if(waitingMessage) waitingMessage.style.display = 'none';

                logs.forEach(log => {
                    const row = document.createElement('tr');
                    
                    const sidCell = document.createElement('td');
                    // Show only the last 8 chars of the SID for brevity
                    sidCell.textContent = '...' + log.callSid.slice(-8); 
                    row.appendChild(sidCell);

                    const questionCell = document.createElement('td');
                    questionCell.textContent = log.question;
                    row.appendChild(questionCell);

                    const responseCell = document.createElement('td');
                    responseCell.textContent = log.response;
                    row.appendChild(responseCell);

                    const timestampCell = document.createElement('td');
                    timestampCell.textContent = new Date(log.timestamp).toLocaleTimeString();
                    row.appendChild(timestampCell);

                    logsTableBody.appendChild(row);
                });
            } else {
                 if(waitingMessage) waitingMessage.style.display = 'table-row';
            }
        } catch (error) {
            console.error('Failed to fetch logs:', error);
        }
    }

    // Fetch logs every 3 seconds
    setInterval(fetchLogs, 3000);

    // Initial fetch
    fetchLogs();
</script>